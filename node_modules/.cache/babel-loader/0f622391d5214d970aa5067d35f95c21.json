{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bureau\\\\React APP\\\\coman-app\\\\src\\\\pages\\\\Machines.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport Loading from \"../utils/Loading\";\nimport axios from \"axios\";\nimport { BsFillCheckSquareFill, BsFillStopwatchFill } from 'react-icons/bs';\nimport { useTranslation } from \"react-i18next\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst num = \"selecteur_machine\";\nconst type = \"nom_type\";\nconst statut = \"status\";\nconst tempsRestant = \"time_before_off\";\n\nfunction Machines() {\n  _s();\n\n  const [machinesData, setMachinesData] = useState({\n    isLoading: true,\n    data: {}\n  });\n  const {\n    t\n  } = useTranslation();\n  const [loadRepeator, setLoadRepeator] = useState(null);\n  const {\n    washing_machine,\n    dryer,\n    number,\n    type: typeText,\n    status,\n    time_remaining\n  } = t('machines_page', {\n    returnObjects: true\n  });\n  let loadData = useCallback(() => {\n    // Load the fake API that loads the real one through Python Backend\n    // to bypass CORS Cross-Origin errors\n    axios.get('https://coman-machines-api.herokuapp.com').then(reponse => {\n      setMachinesData({\n        isLoading: false,\n        data: reponse.data.machine_info_status.machine_list\n      });\n    });\n  }, []);\n  useEffect(() => {\n    if (!loadRepeator) {\n      loadData();\n      setLoadRepeator(setInterval(loadData, 5000));\n    }\n\n    return () => {\n      clearInterval(loadRepeator);\n      setLoadRepeator(null);\n    };\n  }, [loadRepeator, loadData]);\n\n  let timeFormat = secondes => {\n    const minutes = Math.floor(secondes / 60);\n    const newSecondes = secondes - minutes * 60;\n    const minutesString = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    const newSecondesString = newSecondes < 10 ? `0${newSecondes}` : `${newSecondes}`;\n    return minutesString + \":\" + newSecondesString;\n  };\n\n  return machinesData.isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 37\n  }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"machines-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: typeText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: time_remaining\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: machinesData.data.map(machine => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: machine[num]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: machine[type].trim().startsWith('L') ? washing_machine : dryer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: machine[statut] === 1 ? /*#__PURE__*/_jsxDEV(BsFillCheckSquareFill, {\n              style: {\n                color: \"var(--lighter-green)\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(BsFillStopwatchFill, {\n              style: {\n                color: 'var(--orange)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: machine[statut] === 1 ? \"-\" : timeFormat(machine[tempsRestant])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this)]\n        }, machine[num], true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Machines, \"QE1wGJ3NRZD6ZwEhWmyFfb1p0R4=\", false, function () {\n  return [useTranslation];\n});\n\n_c = Machines;\nexport default Machines;\n\nvar _c;\n\n$RefreshReg$(_c, \"Machines\");","map":{"version":3,"sources":["D:/Bureau/React APP/coman-app/src/pages/Machines.jsx"],"names":["useState","useEffect","useCallback","Loading","axios","BsFillCheckSquareFill","BsFillStopwatchFill","useTranslation","num","type","statut","tempsRestant","Machines","machinesData","setMachinesData","isLoading","data","t","loadRepeator","setLoadRepeator","washing_machine","dryer","number","typeText","status","time_remaining","returnObjects","loadData","get","then","reponse","machine_info_status","machine_list","setInterval","clearInterval","timeFormat","secondes","minutes","Math","floor","newSecondes","minutesString","newSecondesString","map","machine","trim","startsWith","color"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from \"react\"\r\nimport Loading from \"../utils/Loading\"\r\nimport axios from \"axios\"\r\nimport { BsFillCheckSquareFill, BsFillStopwatchFill } from 'react-icons/bs'\r\nimport { useTranslation } from \"react-i18next\"\r\n\r\nconst num = \"selecteur_machine\";\r\nconst type = \"nom_type\";\r\nconst statut = \"status\";\r\nconst tempsRestant = \"time_before_off\";\r\n\r\nfunction Machines() {\r\n\r\n    const [ machinesData, setMachinesData ] = useState({\r\n        isLoading: true,\r\n        data: {}\r\n    })\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const [ loadRepeator, setLoadRepeator ] = useState(null);\r\n\r\n    const { \r\n        washing_machine,\r\n        dryer,\r\n        number,\r\n        type: typeText,\r\n        status,\r\n        time_remaining,\r\n    } = t('machines_page', {returnObjects: true})\r\n\r\n    let loadData = useCallback(() => {\r\n        // Load the fake API that loads the real one through Python Backend\r\n        // to bypass CORS Cross-Origin errors\r\n        axios.get('https://coman-machines-api.herokuapp.com')\r\n        .then(reponse => {\r\n            setMachinesData({\r\n                isLoading: false,\r\n                data: reponse.data.machine_info_status.machine_list\r\n            })\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!loadRepeator) {\r\n            loadData();\r\n            setLoadRepeator(setInterval(loadData, 5000));\r\n        }\r\n        return () => {\r\n            clearInterval(loadRepeator);\r\n            setLoadRepeator(null);\r\n        }\r\n    }, [loadRepeator, loadData])\r\n    \r\n    let timeFormat = (secondes) => {\r\n        const minutes = Math.floor(secondes / 60);\r\n        const newSecondes = secondes - minutes * 60;\r\n        const minutesString = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n        const newSecondesString = newSecondes < 10 ? `0${newSecondes}` : `${newSecondes}`;\r\n        return minutesString + \":\" + newSecondesString;\r\n    }\r\n\r\n    return machinesData.isLoading ? <Loading /> : (\r\n        <table className=\"machines-table\">\r\n            <thead>\r\n                <tr>\r\n                    <td>{number}</td>\r\n                    <td>{typeText}</td>\r\n                    <td>{status}</td>\r\n                    <td>{time_remaining}</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {machinesData.data.map(machine => {\r\n                    return (\r\n                        <tr key={machine[num]}>\r\n                            <td>{machine[num]}</td>\r\n                            <td>{machine[type].trim().startsWith('L') ? washing_machine : dryer}</td>\r\n                            <td>\r\n                                {machine[statut] === 1 ? \r\n                                    <BsFillCheckSquareFill style={{color: \"var(--lighter-green)\"}} /> : \r\n                                    <BsFillStopwatchFill style={{color: 'var(--orange)'}} />\r\n                                }\r\n                            </td>\r\n                            <td>{machine[statut] === 1 ? \"-\" : timeFormat(machine[tempsRestant])}</td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Machines;"]},"metadata":{},"sourceType":"module"}