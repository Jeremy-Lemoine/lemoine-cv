{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bureau\\\\React APP\\\\coman-app\\\\src\\\\pages\\\\Admin.jsx\",\n    _s = $RefreshSig$();\n\nimport Loading from \"../utils/Loading\";\nimport useUserData from \"../utils/useUserData\";\nimport { useTranslation } from \"react-i18next\";\nimport database from '../utils/database';\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Admin() {\n  _s();\n\n  const {\n    isLoadingAuth,\n    isLoadedUser,\n    isAuthenticated,\n    userData\n  } = useUserData();\n  const {\n    t\n  } = useTranslation();\n  const [allUsersData, setAllUsersData] = useState([]);\n\n  if (isLoadingAuth) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: t('unauthentified_message_admin_page')\n    }, void 0, false);\n  }\n\n  if (isLoadedUser && !userData.admin) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: t('unauthorized_message_admin_page')\n    }, void 0, false);\n  }\n\n  useEffect(() => {\n    const loadData = async () => {\n      setAllUsersData(database.readDirectory('/users').then(obj => Object.entries(obj).map(array => array[1])));\n    };\n\n    loadData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"TODO Admin page\", allUsersData ? \"Oui\" : \"Non\"]\n  }, void 0, true);\n}\n\n_s(Admin, \"UB97XXS+pEf/m3x/WyE7oYpGmvY=\", false, function () {\n  return [useUserData, useTranslation];\n});\n\n_c = Admin;\nexport default Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"sources":["D:/Bureau/React APP/coman-app/src/pages/Admin.jsx"],"names":["Loading","useUserData","useTranslation","database","useState","useEffect","Admin","isLoadingAuth","isLoadedUser","isAuthenticated","userData","t","allUsersData","setAllUsersData","admin","loadData","readDirectory","then","obj","Object","entries","map","array"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,kBAApB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AAEb,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,YAAjB;AAA+BC,IAAAA,eAA/B;AAAgDC,IAAAA;AAAhD,MAA6DT,WAAW,EAA9E;AAEA,QAAM;AAAEU,IAAAA;AAAF,MAAQT,cAAc,EAA5B;AAEA,QAAM,CAAEU,YAAF,EAAgBC,eAAhB,IAAoCT,QAAQ,CAAC,EAAD,CAAlD;;AAEA,MAAIG,aAAJ,EAAmB;AACf,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAI,CAACE,eAAL,EAAsB;AAClB,wBAAO;AAAA,gBAAGE,CAAC,CAAC,mCAAD;AAAJ,qBAAP;AACH;;AAED,MAAIH,YAAY,IAAI,CAACE,QAAQ,CAACI,KAA9B,EAAqC;AACjC,wBAAO;AAAA,gBAAGH,CAAC,CAAC,iCAAD;AAAJ,qBAAP;AACH;;AAEDN,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,QAAQ,GAAG,YAAY;AACzBF,MAAAA,eAAe,CAACV,QAAQ,CAACa,aAAT,CAAuB,QAAvB,EAAiCC,IAAjC,CAAsCC,GAAG,IAAIC,MAAM,CAACC,OAAP,CAAeF,GAAf,EAAoBG,GAApB,CAAwBC,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAtC,CAA7C,CAAD,CAAf;AACH,KAFD;;AAGAP,IAAAA,QAAQ;AACX,GALQ,EAKN,EALM,CAAT;AAOA,sBACI;AAAA,kCAIIH,YAAY,GAAG,KAAH,GAAW,KAJ3B;AAAA,kBADJ;AASH;;GApCQN,K;UAE8DL,W,EAErDC,c;;;KAJTI,K;AAsCT,eAAeA,KAAf","sourcesContent":["import Loading from \"../utils/Loading\"\r\nimport useUserData from \"../utils/useUserData\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport database from '../utils/database'\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction Admin() {\r\n\r\n    const { isLoadingAuth, isLoadedUser, isAuthenticated, userData } = useUserData();\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const [ allUsersData, setAllUsersData ] = useState([]);\r\n\r\n    if (isLoadingAuth) {\r\n        return <Loading />\r\n    }\r\n\r\n    if (!isAuthenticated) {\r\n        return <>{t('unauthentified_message_admin_page')}</>\r\n    }\r\n\r\n    if (isLoadedUser && !userData.admin) {\r\n        return <>{t('unauthorized_message_admin_page')}</>\r\n    }\r\n\r\n    useEffect(() => {\r\n        const loadData = async () => {\r\n            setAllUsersData(database.readDirectory('/users').then(obj => Object.entries(obj).map(array => array[1])));\r\n        };\r\n        loadData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n        TODO Admin page\r\n        {/* Possibility to manage admin users ? */}\r\n        {\r\n            allUsersData ? \"Oui\" : \"Non\"\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Admin;"]},"metadata":{},"sourceType":"module"}