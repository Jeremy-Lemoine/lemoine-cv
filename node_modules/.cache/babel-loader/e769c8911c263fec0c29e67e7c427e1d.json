{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getDatabase, set, ref, onValue, goOffline, update } from \"firebase/database\";\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_apiKey,\n  authDomain: process.env.REACT_APP_FIREBASE_authDomain,\n  projectId: process.env.REACT_APP_FIREBASE_projectId,\n  storageBucket: process.env.REACT_APP_FIREBASE_storageBucket,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_messagingSenderId,\n  appId: process.env.REACT_APP_FIREBASE_appId,\n  databaseURL: process.env.REACT_APP_FIREBASE_databaseURL\n};\nconst app = initializeApp(firebaseConfig);\n\nconst defaultUserData = function () {\n  let userName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let userPicture = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return {\n    admin: false,\n    language: 'en',\n    userName: userName,\n    userPicture: userPicture\n  };\n};\n\nclass Database {\n  constructor() {\n    this.database = getDatabase(app);\n  }\n\n  getRef(fullPath) {\n    return ref(this.database, fullPath);\n  }\n\n  async setItem(path, id, item) {\n    await set(this.getRef(`${path}/${id}`), item);\n  }\n\n  async readDirectory(path) {\n    return new Promise((resolve, reject) => {\n      const reference = this.getRef(`${path}/`);\n      onValue(reference, items => {\n        if (items.val()) {\n          return resolve(items.val());\n        } else {\n          return reject();\n        }\n      });\n    });\n  }\n\n  async readItem(path, id) {\n    return new Promise((resolve, reject) => {\n      const reference = this.getRef(`${path}/${id}`);\n      onValue(reference, item => {\n        if (item.val()) {\n          return resolve(item.val());\n        } else {\n          return reject();\n        }\n      });\n    });\n  }\n\n  async searchItems(path, query) {\n    const queriesList = Object.entries(query);\n    let retrieved = false;\n    return new Promise((resolve, reject) => {\n      const reference = this.getRef(`${path}/`);\n      onValue(reference, allItemsInPath => {\n        if (!retrieved) {\n          if (!allItemsInPath.val()) {\n            return reject();\n          }\n\n          const filteredItems = Object.entries(allItemsInPath.val()).filter(_ref => {\n            let [_, item] = _ref;\n            return queriesList.map(_ref2 => {\n              let [key, value] = _ref2;\n              return typeof item == 'object' && key in item && item[key] === value;\n            }).reduce((acc, cur) => acc && cur, true);\n          });\n\n          if (filteredItems.length === 0) {\n            return reject();\n          }\n\n          return resolve(filteredItems);\n        }\n      });\n    });\n  }\n\n  async createUser(userID, userName, userPicture) {\n    await this.setItem('users', userID, defaultUserData(userName, userPicture));\n    return defaultUserData(userName, userPicture);\n  }\n\n  async getUserData(userID, userName, userPicture) {\n    let retrieved = false;\n    return new Promise((resolve, _) => {\n      const reference = this.getRef(`users/${userID}`);\n      onValue(reference, async data_raw => {\n        if (!retrieved) {\n          retrieved = true;\n          let data = data_raw.val();\n\n          if (data) {\n            await this.checkUserDataFields(userID, userName, userPicture, data);\n            return resolve(data);\n          } else {\n            return resolve(this.createUser(userID, userName, userPicture));\n          }\n        }\n      });\n    });\n  }\n\n  async setUserData(userID, field, value) {\n    const updates = {};\n    updates[`/users/${userID}/${field}`] = value;\n    await update(ref(this.database), updates);\n  }\n\n  async checkUserDataFields(userID, userName, userPicture, data) {\n    const updates = {};\n    const defaultUser = defaultUserData(userName, userPicture);\n\n    for (let field of Object.keys(defaultUser)) {\n      if (data[field] == null) {\n        updates[`/users/${userID}/${field}`] = defaultUser[field];\n        data[field] = defaultUser[field];\n      }\n    }\n\n    for (let field of Object.keys(data)) {\n      if (defaultUser[field] == null) {\n        updates[`/users/${userID}/${field}`] = null;\n        data[field] = null;\n      }\n    }\n\n    if (data['userName'] !== defaultUser['userName']) {\n      updates[`/users/${userID}/userName`] = defaultUser['userName'];\n    }\n\n    if (data['userPicture'] !== defaultUser['userPicture']) {\n      updates[`/users/${userID}/userPicture`] = defaultUser['userPicture'];\n    }\n\n    if (updates !== {}) {\n      await update(ref(this.database), updates);\n    }\n  }\n\n  disconnect() {\n    goOffline(this.database);\n  }\n\n}\n\nconst database = new Database();\nexport default database;\nexport { defaultUserData };","map":{"version":3,"sources":["D:/Bureau/Projets Perso/React APP/coman-app/src/utils/database.js"],"names":["initializeApp","getDatabase","set","ref","onValue","goOffline","update","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_apiKey","authDomain","REACT_APP_FIREBASE_authDomain","projectId","REACT_APP_FIREBASE_projectId","storageBucket","REACT_APP_FIREBASE_storageBucket","messagingSenderId","REACT_APP_FIREBASE_messagingSenderId","appId","REACT_APP_FIREBASE_appId","databaseURL","REACT_APP_FIREBASE_databaseURL","app","defaultUserData","userName","userPicture","admin","language","Database","constructor","database","getRef","fullPath","setItem","path","id","item","readDirectory","Promise","resolve","reject","reference","items","val","readItem","searchItems","query","queriesList","Object","entries","retrieved","allItemsInPath","filteredItems","filter","_","map","key","value","reduce","acc","cur","length","createUser","userID","getUserData","data_raw","data","checkUserDataFields","setUserData","field","updates","defaultUser","keys","disconnect"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, set, ref, onValue, goOffline, update } from \"firebase/database\"\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_apiKey,\r\n  authDomain: process.env.REACT_APP_FIREBASE_authDomain,\r\n  projectId: process.env.REACT_APP_FIREBASE_projectId,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_storageBucket,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_messagingSenderId,\r\n  appId: process.env.REACT_APP_FIREBASE_appId,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_databaseURL\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nconst defaultUserData = (userName = '', userPicture = '') => {\r\n    return {\r\n        admin: false,\r\n        language: 'en',\r\n        userName: userName,\r\n        userPicture: userPicture\r\n    }\r\n}\r\n\r\nclass Database {\r\n\r\n    constructor() {\r\n        this.database = getDatabase(app);\r\n    }\r\n\r\n    getRef(fullPath) {\r\n        return ref(this.database, fullPath)\r\n    }\r\n    \r\n    async setItem(path, id, item) {\r\n        await set(this.getRef(`${path}/${id}`), item)\r\n    }\r\n\r\n    async readDirectory(path) {\r\n        return new Promise((resolve, reject) => {\r\n            const reference = this.getRef(`${path}/`);\r\n            onValue(reference, (items) => {\r\n                if (items.val()) {\r\n                    return resolve(items.val());\r\n                } else {\r\n                    return reject();\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    async readItem(path, id) {\r\n        return new Promise((resolve, reject) => {\r\n            const reference = this.getRef(`${path}/${id}`);\r\n            onValue(reference, (item) => {\r\n                if (item.val()) {\r\n                    return resolve(item.val());\r\n                } else {\r\n                    return reject();\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    async searchItems(path, query) {\r\n        const queriesList = Object.entries(query);\r\n        let retrieved = false;\r\n        return new Promise((resolve, reject) => {\r\n            const reference = this.getRef(`${path}/`);\r\n            onValue(reference, (allItemsInPath) => {\r\n                if (!retrieved) {\r\n                    if (!allItemsInPath.val()) {\r\n                        return reject();\r\n                    }\r\n                    const filteredItems = Object.entries(allItemsInPath.val()).filter(\r\n                        ([ _, item ]) => {\r\n                            return queriesList.map( ([ key, value ]) => {\r\n                                return typeof(item) == 'object' && key in item && item[key] === value\r\n                            }).reduce((acc, cur) => acc && cur, true)\r\n                        }\r\n                    )\r\n                    if (filteredItems.length === 0) {\r\n                        return reject();\r\n                    }\r\n                    return resolve(filteredItems)\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    async createUser(userID, userName, userPicture) {\r\n        await this.setItem('users', userID, defaultUserData(userName, userPicture));\r\n        return defaultUserData(userName, userPicture);\r\n    }\r\n\r\n    async getUserData(userID, userName, userPicture) {\r\n        let retrieved = false;\r\n        return new Promise((resolve, _) => {\r\n            const reference = this.getRef(`users/${userID}`);\r\n            onValue(reference, async (data_raw) => {\r\n                if (!retrieved) {\r\n                    retrieved = true;\r\n                    let data = data_raw.val();\r\n                    if (data) {\r\n                        await this.checkUserDataFields(userID, userName, userPicture, data)\r\n                        return resolve(data);\r\n                    } else {\r\n                        return resolve(this.createUser(userID, userName, userPicture));\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    async setUserData(userID, field, value) {\r\n        const updates = {};\r\n        updates[`/users/${userID}/${field}`] = value;\r\n        await update(ref(this.database), updates);\r\n    }\r\n\r\n    async checkUserDataFields(userID, userName, userPicture, data) {\r\n        const updates = {};\r\n        const defaultUser = defaultUserData(userName, userPicture);\r\n        for (let field of Object.keys(defaultUser)) {\r\n            if (data[field] == null) {\r\n                updates[`/users/${userID}/${field}`] = defaultUser[field];\r\n                data[field] = defaultUser[field]\r\n            }\r\n        }\r\n        for (let field of Object.keys(data)) {\r\n            if (defaultUser[field] == null) {\r\n                updates[`/users/${userID}/${field}`] = null;\r\n                data[field] = null;\r\n            }\r\n        }\r\n        if (data['userName'] !== defaultUser['userName']) {\r\n            updates[`/users/${userID}/userName`] = defaultUser['userName']\r\n        }\r\n        if (data['userPicture'] !== defaultUser['userPicture']) {\r\n            updates[`/users/${userID}/userPicture`] = defaultUser['userPicture']\r\n        }\r\n        if (updates !== {}) {\r\n            await update(ref(this.database), updates)\r\n        }\r\n    }\r\n\r\n    disconnect() {\r\n        goOffline(this.database)\r\n    }\r\n\r\n}\r\n\r\nconst database = new Database();\r\n\r\nexport default database;\r\nexport { defaultUserData };"]},"metadata":{},"sourceType":"module"}