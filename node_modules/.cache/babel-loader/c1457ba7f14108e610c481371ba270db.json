{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getDatabase, set, ref, onValue } from \"firebase/database\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAN-PNbJlAmJ_zQ6Juyn1ATWAo4PRGxaCY\",\n  authDomain: \"coman-app-react.firebaseapp.com\",\n  projectId: \"coman-app-react\",\n  storageBucket: \"coman-app-react.appspot.com\",\n  messagingSenderId: \"443294717061\",\n  appId: \"1:443294717061:web:1f6110e2d9c8ab90c5c5ec\",\n  databaseURL: \"https://coman-app-react-default-rtdb.europe-west1.firebasedatabase.app\"\n};\nconst app = initializeApp(firebaseConfig);\n\nclass Database {\n  constructor() {\n    this.getRef = fullPath => {\n      return ref(this.database, fullPath);\n    };\n\n    this.database = getDatabase(app);\n  }\n\n  async setItem(path, id, item) {\n    await set(getRef(`${path}/${id}`), item);\n  }\n\n  async readItem(path, id) {\n    return new Promise((resolve, _) => {\n      const reference = getRef(`${path}/${id}`);\n      onValue(reference, item => {\n        return resolve(item.val());\n      });\n    });\n  }\n\n  async searchItems(path, query) {\n    const queriesList = Object.entries(query);\n    return new Promise((resolve, _) => {\n      const reference = getRef(`${path}/`);\n      onValue(reference, allItemsInPath => {\n        if (!allItemsInPath.val()) return resolve([]);\n        const filteredItems = Object.entries(allItemsInPath.val()).filter(_ref => {\n          let [_, item] = _ref;\n          return queriesList.map(_ref2 => {\n            let [key, value] = _ref2;\n            return typeof item == 'object' && key in item && item[key] === value;\n          }).reduce((acc, cur) => acc && cur, true);\n        });\n        return resolve(filteredItems);\n      });\n    });\n  }\n\n}\n\nconst database = new Database();\nexport default database;","map":{"version":3,"sources":["D:/Bureau/Test React/coman-app/src/utils/database.js"],"names":["initializeApp","getDatabase","set","ref","onValue","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseURL","app","Database","constructor","getRef","fullPath","database","setItem","path","id","item","readItem","Promise","resolve","_","reference","val","searchItems","query","queriesList","Object","entries","allItemsInPath","filteredItems","filter","map","key","value","reduce","acc","cur"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,WAAT,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgCC,OAAhC,QAA+C,mBAA/C;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,iCAFS;AAGrBC,EAAAA,SAAS,EAAE,iBAHU;AAIrBC,EAAAA,aAAa,EAAE,6BAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE,2CANc;AAOrBC,EAAAA,WAAW,EAAE;AAPQ,CAAvB;AAUA,MAAMC,GAAG,GAAGb,aAAa,CAACK,cAAD,CAAzB;;AAEA,MAAMS,QAAN,CAAe;AAEXC,EAAAA,WAAW,GAAG;AAAA,SAIdC,MAJc,GAIJC,QAAD,IAAc;AACnB,aAAOd,GAAG,CAAC,KAAKe,QAAN,EAAgBD,QAAhB,CAAV;AACH,KANa;;AACV,SAAKC,QAAL,GAAgBjB,WAAW,CAACY,GAAD,CAA3B;AACH;;AAMY,QAAPM,OAAO,CAACC,IAAD,EAAOC,EAAP,EAAWC,IAAX,EAAiB;AAC1B,UAAMpB,GAAG,CAACc,MAAM,CAAE,GAAEI,IAAK,IAAGC,EAAG,EAAf,CAAP,EAA0BC,IAA1B,CAAT;AACH;;AAEa,QAARC,QAAQ,CAACH,IAAD,EAAOC,EAAP,EAAW;AACrB,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,CAAV,KAAgB;AAC/B,YAAMC,SAAS,GAAGX,MAAM,CAAE,GAAEI,IAAK,IAAGC,EAAG,EAAf,CAAxB;AACAjB,MAAAA,OAAO,CAACuB,SAAD,EAAaL,IAAD,IAAU;AACzB,eAAOG,OAAO,CAACH,IAAI,CAACM,GAAL,EAAD,CAAd;AACH,OAFM,CAAP;AAGH,KALM,CAAP;AAMH;;AAEgB,QAAXC,WAAW,CAACT,IAAD,EAAOU,KAAP,EAAc;AAC3B,UAAMC,WAAW,GAAGC,MAAM,CAACC,OAAP,CAAeH,KAAf,CAApB;AACA,WAAO,IAAIN,OAAJ,CAAY,CAACC,OAAD,EAAUC,CAAV,KAAgB;AAC/B,YAAMC,SAAS,GAAGX,MAAM,CAAE,GAAEI,IAAK,GAAT,CAAxB;AACAhB,MAAAA,OAAO,CAACuB,SAAD,EAAaO,cAAD,IAAoB;AACnC,YAAI,CAACA,cAAc,CAACN,GAAf,EAAL,EAA2B,OAAOH,OAAO,CAAC,EAAD,CAAd;AAC3B,cAAMU,aAAa,GAAGH,MAAM,CAACC,OAAP,CAAeC,cAAc,CAACN,GAAf,EAAf,EAAqCQ,MAArC,CAClB,QAAiB;AAAA,cAAhB,CAAEV,CAAF,EAAKJ,IAAL,CAAgB;AACb,iBAAOS,WAAW,CAACM,GAAZ,CAAiB,SAAoB;AAAA,gBAAnB,CAAEC,GAAF,EAAOC,KAAP,CAAmB;AACxC,mBAAO,OAAOjB,IAAP,IAAgB,QAAhB,IAA4BgB,GAAG,IAAIhB,IAAnC,IAA2CA,IAAI,CAACgB,GAAD,CAAJ,KAAcC,KAAhE;AACH,WAFM,EAEJC,MAFI,CAEG,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,IAAIC,GAFxB,EAE6B,IAF7B,CAAP;AAGH,SALiB,CAAtB;AAOA,eAAOjB,OAAO,CAACU,aAAD,CAAd;AACH,OAVM,CAAP;AAWH,KAbM,CAAP;AAcH;;AAvCU;;AA0Cf,MAAMjB,QAAQ,GAAG,IAAIJ,QAAJ,EAAjB;AAEA,eAAeI,QAAf","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, set, ref, onValue } from \"firebase/database\"\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAN-PNbJlAmJ_zQ6Juyn1ATWAo4PRGxaCY\",\r\n  authDomain: \"coman-app-react.firebaseapp.com\",\r\n  projectId: \"coman-app-react\",\r\n  storageBucket: \"coman-app-react.appspot.com\",\r\n  messagingSenderId: \"443294717061\",\r\n  appId: \"1:443294717061:web:1f6110e2d9c8ab90c5c5ec\",\r\n  databaseURL: \"https://coman-app-react-default-rtdb.europe-west1.firebasedatabase.app\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nclass Database {\r\n\r\n    constructor() {\r\n        this.database = getDatabase(app);\r\n    }\r\n\r\n    getRef = (fullPath) => {\r\n        return ref(this.database, fullPath)\r\n    }\r\n\r\n    async setItem(path, id, item) {\r\n        await set(getRef(`${path}/${id}`), item)\r\n    }\r\n\r\n    async readItem(path, id) {\r\n        return new Promise((resolve, _) => {\r\n            const reference = getRef(`${path}/${id}`);\r\n            onValue(reference, (item) => {\r\n                return resolve(item.val());\r\n            })\r\n        })\r\n    }\r\n\r\n    async searchItems(path, query) {\r\n        const queriesList = Object.entries(query);\r\n        return new Promise((resolve, _) => {\r\n            const reference = getRef(`${path}/`);\r\n            onValue(reference, (allItemsInPath) => {\r\n                if (!allItemsInPath.val()) return resolve([]);\r\n                const filteredItems = Object.entries(allItemsInPath.val()).filter(\r\n                    ([ _, item ]) => {\r\n                        return queriesList.map( ([ key, value ]) => {\r\n                            return typeof(item) == 'object' && key in item && item[key] === value\r\n                        }).reduce((acc, cur) => acc && cur, true)\r\n                    }\r\n                )\r\n                return resolve(filteredItems)\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nconst database = new Database();\r\n\r\nexport default database;"]},"metadata":{},"sourceType":"module"}