{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bureau\\\\Test React\\\\coman-app\\\\src\\\\pages\\\\Other.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useLoaded from \"../utils/Loaded\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Other() {\n  _s();\n\n  const [text, setText] = useState(\"LOL\");\n\n  let loadedRender = () => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"is-loaded\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 39\n    }, this);\n  };\n\n  const [isLoaded, setIsLoaded, render] = useLoaded(loadedRender);\n  setTimeout(() => {\n    setText(\"LOOOOOOL\");\n    setIsLoaded(true);\n  }, 3000);\n  return render();\n}\n\n_s(Other, \"NMncFMtfz7V2bN6O+0XPEjAOoC4=\", false, function () {\n  return [useLoaded];\n});\n\n_c = Other;\nexport default Other;\n\nvar _c;\n\n$RefreshReg$(_c, \"Other\");","map":{"version":3,"sources":["D:/Bureau/Test React/coman-app/src/pages/Other.jsx"],"names":["useState","useLoaded","Other","text","setText","loadedRender","isLoaded","setIsLoaded","render","setTimeout"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AAEb,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAoBJ,QAAQ,CAAC,KAAD,CAAlC;;AAEA,MAAIK,YAAY,GAAG,MAAM;AAAE,wBAAO;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA,gBAA0BF;AAA1B;AAAA;AAAA;AAAA;AAAA,YAAP;AAA4C,GAAvE;;AAEA,QAAM,CAAEG,QAAF,EAAYC,WAAZ,EAAyBC,MAAzB,IAAoCP,SAAS,CAACI,YAAD,CAAnD;AAEAI,EAAAA,UAAU,CAAE,MAAM;AAAEL,IAAAA,OAAO,CAAC,UAAD,CAAP;AAAqBG,IAAAA,WAAW,CAAC,IAAD,CAAX;AAAmB,GAAlD,EAAoD,IAApD,CAAV;AAEA,SAAOC,MAAM,EAAb;AAGH;;GAbQN,K;UAMqCD,S;;;KANrCC,K;AAeT,eAAeA,KAAf","sourcesContent":["import { useState } from \"react\";\r\nimport useLoaded from \"../utils/Loaded\";\r\n\r\nfunction Other() {\r\n\r\n    const [ text, setText ] = useState(\"LOL\")\r\n\r\n    let loadedRender = () => { return <p className=\"is-loaded\">{text}</p> }\r\n\r\n    const [ isLoaded, setIsLoaded, render ] = useLoaded(loadedRender)\r\n\r\n    setTimeout( () => { setText(\"LOOOOOOL\"); setIsLoaded(true) }, 3000)\r\n\r\n    return render();\r\n\r\n\r\n}\r\n\r\nexport default Other;"]},"metadata":{},"sourceType":"module"}