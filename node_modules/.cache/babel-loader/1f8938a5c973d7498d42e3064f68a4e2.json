{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bureau\\\\Test React\\\\coman-app\\\\src\\\\pages\\\\settings\\\\Language.jsx\";\nimport { changeLanguage } from 'i18next';\nimport Select from 'react-select';\nimport info from '../../languages/info';\nimport database from '../../utils/database';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = info.map(lang => {\n  return {\n    value: lang.language,\n    label: lang.label\n  };\n}).concat([{\n  value: 1,\n  label: 1\n}, {\n  value: 2,\n  label: 2\n}, {\n  value: 3,\n  label: 3\n}]);\nconst colourStyles = {\n  control: styles => ({ ...styles,\n    backgroundColor: 'white'\n  }),\n  option: (styles, _ref) => {\n    let {\n      data,\n      isDisabled,\n      isFocused,\n      isSelected\n    } = _ref;\n    return { ...styles,\n      border: '1px solid gray',\n      borderRadius: '5px',\n      backgroundColor: isFocused ? 'var(--lighter-green)' : 'white'\n    };\n  },\n  menu: base => {\n    return { ...base,\n      paddingTop: '0',\n      backgroundColor: 'transparent'\n    };\n  }\n};\n\nconst LanguageSelectorField = _ref2 => {\n  let {\n    userData,\n    userID\n  } = _ref2;\n\n  const handleChange = _ref3 => {\n    let {\n      value\n    } = _ref3;\n    changeLanguage(value);\n    database.setUserData(userID, 'language', value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Select, {\n    classNamePrefix: \"selection-component\",\n    defaultValue: options.find(lang => lang.value === userData.language),\n    options: options,\n    className: \"selection-component\",\n    onChange: handleChange,\n    styles: colourStyles,\n    hideSelectedOptions: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_c = LanguageSelectorField;\nexport default LanguageSelectorField;\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguageSelectorField\");","map":{"version":3,"sources":["D:/Bureau/Test React/coman-app/src/pages/settings/Language.jsx"],"names":["changeLanguage","Select","info","database","options","map","lang","value","language","label","concat","colourStyles","control","styles","backgroundColor","option","data","isDisabled","isFocused","isSelected","border","borderRadius","menu","base","paddingTop","LanguageSelectorField","userData","userID","handleChange","setUserData","find"],"mappings":";AAAA,SAASA,cAAT,QAA+B,SAA/B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,QAAP,MAAqB,sBAArB;;AAEA,MAAMC,OAAO,GAAGF,IAAI,CAACG,GAAL,CAASC,IAAI,IAAI;AAC7B,SAAO;AAAEC,IAAAA,KAAK,EAAED,IAAI,CAACE,QAAd;AAAwBC,IAAAA,KAAK,EAAEH,IAAI,CAACG;AAApC,GAAP;AACH,CAFe,EAEbC,MAFa,CAEN,CACN;AAAEH,EAAAA,KAAK,EAAE,CAAT;AAAYE,EAAAA,KAAK,EAAE;AAAnB,CADM,EAEN;AAAEF,EAAAA,KAAK,EAAE,CAAT;AAAYE,EAAAA,KAAK,EAAE;AAAnB,CAFM,EAGN;AAAEF,EAAAA,KAAK,EAAE,CAAT;AAAYE,EAAAA,KAAK,EAAE;AAAnB,CAHM,CAFM,CAAhB;AAQA,MAAME,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAEC,MAAM,KAAK,EAAE,GAAGA,MAAL;AAAaC,IAAAA,eAAe,EAAE;AAA9B,GAAL,CADE;AAEjBC,EAAAA,MAAM,EAAE,CAACF,MAAD,WAAyD;AAAA,QAAhD;AAAEG,MAAAA,IAAF;AAAQC,MAAAA,UAAR;AAAoBC,MAAAA,SAApB;AAA+BC,MAAAA;AAA/B,KAAgD;AAC7D,WAAO,EACP,GAAGN,MADI;AAEPO,MAAAA,MAAM,EAAE,gBAFD;AAGPC,MAAAA,YAAY,EAAE,KAHP;AAIPP,MAAAA,eAAe,EAAEI,SAAS,GAAG,sBAAH,GAA4B;AAJ/C,KAAP;AAMH,GATgB;AAUjBI,EAAAA,IAAI,EAAEC,IAAI,IAAI;AACV,WAAO,EACH,GAAGA,IADA;AAEHC,MAAAA,UAAU,EAAE,GAFT;AAGHV,MAAAA,eAAe,EAAE;AAHd,KAAP;AAKH;AAhBgB,CAArB;;AAmBA,MAAMW,qBAAqB,GAAG,SAA0B;AAAA,MAAzB;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAyB;;AAEpD,QAAMC,YAAY,GAAG,SAAe;AAAA,QAAd;AAAErB,MAAAA;AAAF,KAAc;AAChCP,IAAAA,cAAc,CAACO,KAAD,CAAd;AACAJ,IAAAA,QAAQ,CAAC0B,WAAT,CAAqBF,MAArB,EAA6B,UAA7B,EAAyCpB,KAAzC;AACH,GAHD;;AAKA,sBACI,QAAC,MAAD;AACA,IAAA,eAAe,EAAC,qBADhB;AAEA,IAAA,YAAY,EAAEH,OAAO,CAAC0B,IAAR,CAAaxB,IAAI,IAAIA,IAAI,CAACC,KAAL,KAAemB,QAAQ,CAAClB,QAA7C,CAFd;AAGA,IAAA,OAAO,EAAEJ,OAHT;AAIA,IAAA,SAAS,EAAC,qBAJV;AAKA,IAAA,QAAQ,EAAEwB,YALV;AAMA,IAAA,MAAM,EAAEjB,YANR;AAOA,IAAA,mBAAmB;AAPnB;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAnBD;;KAAMc,qB;AAqBN,eAAeA,qBAAf","sourcesContent":["import { changeLanguage } from 'i18next';\r\nimport Select from 'react-select';\r\nimport info from '../../languages/info';\r\nimport database from '../../utils/database';\r\n\r\nconst options = info.map(lang => {\r\n    return { value: lang.language, label: lang.label }\r\n}).concat([\r\n    { value: 1, label: 1 },\r\n    { value: 2, label: 2 },\r\n    { value: 3, label: 3 }\r\n]);\r\n\r\nconst colourStyles = {\r\n    control: styles => ({ ...styles, backgroundColor: 'white' }),\r\n    option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n        return {\r\n        ...styles,\r\n        border: '1px solid gray',\r\n        borderRadius: '5px',\r\n        backgroundColor: isFocused ? 'var(--lighter-green)' : 'white'\r\n        };\r\n    },\r\n    menu: base => {\r\n        return {\r\n            ...base,\r\n            paddingTop: '0',\r\n            backgroundColor: 'transparent'\r\n        }\r\n    }\r\n};\r\n\r\nconst LanguageSelectorField = ({ userData, userID }) => {\r\n\r\n    const handleChange = ({ value }) => {\r\n        changeLanguage(value);\r\n        database.setUserData(userID, 'language', value);\r\n    }\r\n\r\n    return (\r\n        <Select\r\n        classNamePrefix=\"selection-component\"\r\n        defaultValue={options.find(lang => lang.value === userData.language)}\r\n        options={options}\r\n        className=\"selection-component\"\r\n        onChange={handleChange}\r\n        styles={colourStyles}\r\n        hideSelectedOptions\r\n        />\r\n    );\r\n\r\n};\r\n\r\nexport default LanguageSelectorField;"]},"metadata":{},"sourceType":"module"}