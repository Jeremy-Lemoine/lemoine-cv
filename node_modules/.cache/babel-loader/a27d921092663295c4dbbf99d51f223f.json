{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getDatabase, set, ref, onValue, goOffline } from \"firebase/database\";\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_apiKey,\n  authDomain: process.env.REACT_APP_FIREBASE_authDomain,\n  projectId: process.env.REACT_APP_FIREBASE_projectId,\n  storageBucket: process.env.REACT_APP_FIREBASE_storageBucket,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_messagingSenderId,\n  appId: process.env.REACT_APP_FIREBASE_appId,\n  databaseURL: process.env.REACT_APP_FIREBASE_databaseURL\n};\nconst app = initializeApp(firebaseConfig);\n\nclass Database {\n  constructor() {\n    this.database = getDatabase(app);\n  }\n\n  getRef(fullPath) {\n    return ref(this.database, fullPath);\n  }\n\n  async setItem(path, id, item) {\n    await set(this.getRef(`${path}/${id}`), item);\n  }\n\n  async readItem(path, id) {\n    return new Promise((resolve, _) => {\n      const reference = this.getRef(`${path}/${id}`);\n      onValue(reference, item => {\n        return resolve(item.val());\n      });\n    });\n  }\n\n  async searchItems(path, query) {\n    const queriesList = Object.entries(query);\n    return new Promise((resolve, reject) => {\n      const reference = this.getRef(`${path}/`);\n      onValue(reference, allItemsInPath => {\n        if (!allItemsInPath.val()) {\n          return reject();\n        }\n\n        const filteredItems = Object.entries(allItemsInPath.val()).filter(_ref => {\n          let [_, item] = _ref;\n          return queriesList.map(_ref2 => {\n            let [key, value] = _ref2;\n            return typeof item == 'object' && key in item && item[key] === value;\n          }).reduce((acc, cur) => acc && cur, true);\n        });\n\n        if (filteredItems.length === 0) {\n          return reject();\n        }\n\n        return resolve(filteredItems);\n      });\n    });\n  }\n\n  disconnect() {\n    goOffline(this.database);\n  }\n\n}\n\nconst database = new Database();\nexport default database;","map":{"version":3,"sources":["D:/Bureau/Test React/coman-app/src/utils/database.js"],"names":["initializeApp","getDatabase","set","ref","onValue","goOffline","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_apiKey","authDomain","REACT_APP_FIREBASE_authDomain","projectId","REACT_APP_FIREBASE_projectId","storageBucket","REACT_APP_FIREBASE_storageBucket","messagingSenderId","REACT_APP_FIREBASE_messagingSenderId","appId","REACT_APP_FIREBASE_appId","databaseURL","REACT_APP_FIREBASE_databaseURL","app","Database","constructor","database","getRef","fullPath","setItem","path","id","item","readItem","Promise","resolve","_","reference","val","searchItems","query","queriesList","Object","entries","reject","allItemsInPath","filteredItems","filter","map","key","value","reduce","acc","cur","length","disconnect"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, set, ref, onValue, goOffline } from \"firebase/database\"\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_apiKey,\r\n  authDomain: process.env.REACT_APP_FIREBASE_authDomain,\r\n  projectId: process.env.REACT_APP_FIREBASE_projectId,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_storageBucket,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_messagingSenderId,\r\n  appId: process.env.REACT_APP_FIREBASE_appId,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_databaseURL\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nclass Database {\r\n\r\n    constructor() {\r\n        this.database = getDatabase(app);\r\n    }\r\n\r\n    getRef(fullPath) {\r\n        return ref(this.database, fullPath)\r\n    }\r\n\r\n    async setItem(path, id, item) {\r\n        await set(this.getRef(`${path}/${id}`), item)\r\n    }\r\n\r\n    async readItem(path, id) {\r\n        return new Promise((resolve, _) => {\r\n            const reference = this.getRef(`${path}/${id}`);\r\n            onValue(reference, (item) => {\r\n                return resolve(item.val());\r\n            })\r\n        })\r\n    }\r\n\r\n    async searchItems(path, query) {\r\n        const queriesList = Object.entries(query);\r\n        return new Promise((resolve, reject) => {\r\n            const reference = this.getRef(`${path}/`);\r\n            onValue(reference, (allItemsInPath) => {\r\n                if (!allItemsInPath.val()) {\r\n                    return reject();\r\n                }\r\n                const filteredItems = Object.entries(allItemsInPath.val()).filter(\r\n                    ([ _, item ]) => {\r\n                        return queriesList.map( ([ key, value ]) => {\r\n                            return typeof(item) == 'object' && key in item && item[key] === value\r\n                        }).reduce((acc, cur) => acc && cur, true)\r\n                    }\r\n                )\r\n                if (filteredItems.length === 0) {\r\n                    return reject();\r\n                }\r\n                return resolve(filteredItems)\r\n            })\r\n        })\r\n    }\r\n\r\n    disconnect() {\r\n        goOffline(this.database)\r\n    }\r\n\r\n}\r\n\r\nconst database = new Database();\r\n\r\nexport default database;"]},"metadata":{},"sourceType":"module"}