{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bureau\\\\Projets Perso\\\\React APP\\\\coman-app\\\\src\\\\utils\\\\components\\\\checkbox.jsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CheckBox(_ref) {\n  _s();\n\n  let {\n    sizeInPx = 50,\n    onChange,\n    initial = false,\n    strokeWidthInPx = 3\n  } = _ref;\n  const [isChecked, SetIsChecked] = useState(initial);\n\n  const handleChange = onChange || (_ => {});\n\n  const getCheckmarkPoints = useCallback(() => {\n    const center = sizeInPx / 2;\n    const x1 = center - sizeInPx / 5;\n    const y1 = center - sizeInPx / 50;\n    const x2 = center - sizeInPx / 25;\n    const y2 = center + sizeInPx / 7.2;\n    const x3 = center + sizeInPx / 4.5;\n    const y3 = center - sizeInPx / 8.3;\n    return [x1, y1, x2, y2, x3, y3].join(' ');\n  }, [sizeInPx]);\n  return /*#__PURE__*/_jsxDEV(motion.svg, {\n    width: sizeInPx,\n    height: sizeInPx,\n    children: [/*#__PURE__*/_jsxDEV(motion.rect, {\n      className: `checkbox${isChecked ? ' checked' : ''}`,\n      initial: {\n        pathLength: 0,\n        opacity: 0,\n        rx: isChecked ? sizeInPx / 2 : sizeInPx / 15\n      },\n      animate: {\n        pathLength: 1,\n        opacity: 1,\n        rx: isChecked ? sizeInPx / 2 : sizeInPx / 15,\n        x: isChecked ? strokeWidthInPx + 1 + sizeInPx / 10 : strokeWidthInPx + 1,\n        y: isChecked ? strokeWidthInPx + 1 + sizeInPx / 10 : strokeWidthInPx + 1,\n        width: isChecked ? sizeInPx - 2 * (strokeWidthInPx + 1 + sizeInPx / 10) : sizeInPx - 2 * strokeWidthInPx - 2,\n        height: isChecked ? sizeInPx - 2 * (strokeWidthInPx + 1 + sizeInPx / 10) : sizeInPx - 2 * strokeWidthInPx - 2\n      },\n      transition: {\n        duration: 0.5,\n        delay: 0.5\n      },\n      onClick: () => {\n        SetIsChecked(isChecked => !isChecked);\n        handleChange(isChecked);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(motion.polyline, {\n      points: getCheckmarkPoints(),\n      fill: \"none\",\n      initial: {\n        pathLength: 0,\n        opacity: 0\n      },\n      animate: isChecked ? {\n        pathLength: 1,\n        opacity: 1\n      } : {\n        pathLength: 0,\n        opacity: 0\n      },\n      transition: {\n        duration: 0.5\n      },\n      stroke: \"var(--orange)\",\n      strokeWidth: `${strokeWidthInPx}px`,\n      strokeLinecap: \"round\",\n      cursor: \"pointer\",\n      onClick: () => {\n        SetIsChecked(isChecked => !isChecked);\n        handleChange(isChecked);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CheckBox, \"s0zmgA4anHVzewUb4XU3eZyrmFE=\");\n\n_c = CheckBox;\nexport default CheckBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckBox\");","map":{"version":3,"sources":["D:/Bureau/Projets Perso/React APP/coman-app/src/utils/components/checkbox.jsx"],"names":["useCallback","useState","motion","CheckBox","sizeInPx","onChange","initial","strokeWidthInPx","isChecked","SetIsChecked","handleChange","_","getCheckmarkPoints","center","x1","y1","x2","y2","x3","y3","join","pathLength","opacity","rx","x","y","width","height","duration","delay"],"mappings":"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","sourcesContent":["import { useCallback, useState } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\n\r\nfunction CheckBox({sizeInPx = 50, onChange, initial = false, strokeWidthInPx = 3}) {\r\n\r\n    const [ isChecked, SetIsChecked ] = useState(initial);\r\n    const handleChange = onChange || ((_) => {});\r\n\r\n    const getCheckmarkPoints = useCallback(() => {\r\n        const center = sizeInPx/2;\r\n        const x1 = center - sizeInPx/5;\r\n        const y1 = center - sizeInPx/50;\r\n        const x2 = center - sizeInPx/25;\r\n        const y2 = center + sizeInPx/7.2;\r\n        const x3 = center + sizeInPx/4.5;\r\n        const y3 = center - sizeInPx/8.3;\r\n        return [x1, y1, x2, y2, x3, y3].join(' ');\r\n    }, [sizeInPx])\r\n\r\n    return (\r\n        <motion.svg\r\n            width={sizeInPx}\r\n            height={sizeInPx}\r\n        >\r\n            <motion.rect\r\n                className={`checkbox${isChecked ? ' checked' : ''}`}\r\n                initial={{pathLength: 0, opacity: 0, rx: isChecked ? sizeInPx/2 : sizeInPx/15}}\r\n                animate={{pathLength: 1, opacity: 1,\r\n                            rx: isChecked ? sizeInPx/2 : sizeInPx/15,\r\n                            x: isChecked ? strokeWidthInPx + 1 + sizeInPx/10 : strokeWidthInPx + 1,\r\n                            y: isChecked ? strokeWidthInPx + 1 + sizeInPx/10 : strokeWidthInPx + 1,\r\n                            width: isChecked ? sizeInPx - 2*(strokeWidthInPx + 1 + sizeInPx/10) : sizeInPx - 2*strokeWidthInPx - 2,\r\n                            height: isChecked ? sizeInPx - 2*(strokeWidthInPx + 1 + sizeInPx/10) : sizeInPx - 2*strokeWidthInPx - 2,\r\n                        }}\r\n                transition={{duration: 0.5, delay: 0.5}}\r\n                onClick={() => {SetIsChecked(isChecked => !isChecked); handleChange(isChecked)}}\r\n            />\r\n            <motion.polyline\r\n                points={getCheckmarkPoints()}\r\n                fill=\"none\"\r\n                initial={{pathLength: 0, opacity: 0}}\r\n                animate={isChecked ? {pathLength: 1, opacity: 1} : {pathLength: 0, opacity: 0}}\r\n                transition={{duration: 0.5}}\r\n                stroke=\"var(--orange)\"\r\n                strokeWidth={`${strokeWidthInPx}px`}\r\n                strokeLinecap=\"round\"\r\n                cursor=\"pointer\"\r\n                onClick={() => {SetIsChecked(isChecked => !isChecked); handleChange(isChecked)}}\r\n            />\r\n        </motion.svg>\r\n    )\r\n}\r\n\r\nexport default CheckBox;"]},"metadata":{},"sourceType":"module"}