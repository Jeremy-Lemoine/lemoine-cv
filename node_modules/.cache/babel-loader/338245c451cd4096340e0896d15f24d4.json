{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getDatabase, set, ref, onValue, goOffline, update } from \"firebase/database\";\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_apiKey,\n  authDomain: process.env.REACT_APP_FIREBASE_authDomain,\n  projectId: process.env.REACT_APP_FIREBASE_projectId,\n  storageBucket: process.env.REACT_APP_FIREBASE_storageBucket,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_messagingSenderId,\n  appId: process.env.REACT_APP_FIREBASE_appId,\n  databaseURL: process.env.REACT_APP_FIREBASE_databaseURL\n};\nconst app = initializeApp(firebaseConfig);\nconst defaultUserData = {\n  param1: null,\n  param2: null\n};\n\nclass Database {\n  constructor() {\n    this.database = getDatabase(app);\n  }\n\n  getRef(fullPath) {\n    return ref(this.database, fullPath);\n  }\n\n  async setItem(path, id, item) {\n    console.log(0);\n    await set(this.getRef(`${path}/${id}`), item);\n    console.log(1);\n  }\n\n  async readItem(path, id) {\n    return new Promise((resolve, reject) => {\n      const reference = this.getRef(`${path}/${id}`);\n      onValue(reference, item => {\n        if (item.val()) {\n          return resolve(item.val());\n        } else {\n          return reject();\n        }\n      });\n    });\n  }\n\n  async searchItems(path, query) {\n    const queriesList = Object.entries(query);\n    return new Promise((resolve, reject) => {\n      const reference = this.getRef(`${path}/`);\n      onValue(reference, allItemsInPath => {\n        if (!allItemsInPath.val()) {\n          return reject();\n        }\n\n        const filteredItems = Object.entries(allItemsInPath.val()).filter(_ref => {\n          let [_, item] = _ref;\n          return queriesList.map(_ref2 => {\n            let [key, value] = _ref2;\n            return typeof item == 'object' && key in item && item[key] === value;\n          }).reduce((acc, cur) => acc && cur, true);\n        });\n\n        if (filteredItems.length === 0) {\n          return reject();\n        }\n\n        return resolve(filteredItems);\n      });\n    });\n  }\n\n  async createUser(userID) {\n    await this.setItem('users', userID, defaultUserData);\n    return defaultUserData;\n  }\n\n  async getUserData(userID) {\n    return new Promise((resolve, _) => {\n      const reference = this.getRef(`users/${userID}`);\n      onValue(reference, data_raw => {\n        const data = data_raw.val();\n\n        if (data) {\n          this.checkUserDataFields(userID, data);\n          return resolve(data);\n        } else {\n          return resolve(this.createUser());\n        }\n      });\n    });\n  }\n\n  async checkUserDataFields(userID, data) {\n    const updates = {};\n\n    for (let field of Object.keys(defaultUserData)) {\n      if (data[field] == null) {\n        updates[`users/${userID}/${field}`] = defaultUserData[field];\n      }\n    }\n\n    if (updates !== {}) {\n      update(ref(this.database), updates);\n    }\n  }\n\n  disconnect() {\n    goOffline(this.database);\n  }\n\n}\n\nconst database = new Database();\nset(ref(database.database), 'users/' + 12, {\n  a: 2\n});\nexport default database;","map":{"version":3,"sources":["D:/Bureau/Test React/coman-app/src/utils/database.js"],"names":["initializeApp","getDatabase","set","ref","onValue","goOffline","update","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_apiKey","authDomain","REACT_APP_FIREBASE_authDomain","projectId","REACT_APP_FIREBASE_projectId","storageBucket","REACT_APP_FIREBASE_storageBucket","messagingSenderId","REACT_APP_FIREBASE_messagingSenderId","appId","REACT_APP_FIREBASE_appId","databaseURL","REACT_APP_FIREBASE_databaseURL","app","defaultUserData","param1","param2","Database","constructor","database","getRef","fullPath","setItem","path","id","item","console","log","readItem","Promise","resolve","reject","reference","val","searchItems","query","queriesList","Object","entries","allItemsInPath","filteredItems","filter","_","map","key","value","reduce","acc","cur","length","createUser","userID","getUserData","data_raw","data","checkUserDataFields","updates","field","keys","disconnect","a"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, set, ref, onValue, goOffline, update } from \"firebase/database\"\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_apiKey,\r\n  authDomain: process.env.REACT_APP_FIREBASE_authDomain,\r\n  projectId: process.env.REACT_APP_FIREBASE_projectId,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_storageBucket,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_messagingSenderId,\r\n  appId: process.env.REACT_APP_FIREBASE_appId,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_databaseURL\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst defaultUserData = {\r\n    param1: null,\r\n    param2: null\r\n}\r\n\r\nclass Database {\r\n\r\n    constructor() {\r\n        this.database = getDatabase(app);\r\n    }\r\n\r\n    getRef(fullPath) {\r\n        return ref(this.database, fullPath)\r\n    }\r\n    \r\n    async setItem(path, id, item) {\r\n        console.log(0);\r\n        await set(this.getRef(`${path}/${id}`), item)\r\n        console.log(1);\r\n    }\r\n\r\n    async readItem(path, id) {\r\n        return new Promise((resolve, reject) => {\r\n            const reference = this.getRef(`${path}/${id}`);\r\n            onValue(reference, (item) => {\r\n                if (item.val()) {\r\n                    return resolve(item.val());\r\n                } else {\r\n                    return reject();\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    async searchItems(path, query) {\r\n        const queriesList = Object.entries(query);\r\n        return new Promise((resolve, reject) => {\r\n            const reference = this.getRef(`${path}/`);\r\n            onValue(reference, (allItemsInPath) => {\r\n                if (!allItemsInPath.val()) {\r\n                    return reject();\r\n                }\r\n                const filteredItems = Object.entries(allItemsInPath.val()).filter(\r\n                    ([ _, item ]) => {\r\n                        return queriesList.map( ([ key, value ]) => {\r\n                            return typeof(item) == 'object' && key in item && item[key] === value\r\n                        }).reduce((acc, cur) => acc && cur, true)\r\n                    }\r\n                )\r\n                if (filteredItems.length === 0) {\r\n                    return reject();\r\n                }\r\n                return resolve(filteredItems)\r\n            })\r\n        })\r\n    }\r\n\r\n    async createUser(userID) {\r\n        await this.setItem('users', userID, defaultUserData);\r\n        return defaultUserData;\r\n    }\r\n\r\n    async getUserData(userID) {\r\n        return new Promise((resolve, _) => {\r\n            const reference = this.getRef(`users/${userID}`);\r\n            onValue(reference, (data_raw) => {\r\n                const data = data_raw.val();\r\n                if (data) {\r\n                    this.checkUserDataFields(userID, data);\r\n                    return resolve(data);\r\n                } else {\r\n                    return resolve(this.createUser());\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    async checkUserDataFields(userID, data) {\r\n        const updates = {}\r\n        for (let field of Object.keys(defaultUserData)) {\r\n            if (data[field] == null) {\r\n                updates[`users/${userID}/${field}`] = defaultUserData[field];\r\n            }\r\n        }\r\n        if (updates !== {}) {\r\n            update(ref(this.database), updates)\r\n        }\r\n    }\r\n\r\n    disconnect() {\r\n        goOffline(this.database)\r\n    }\r\n\r\n}\r\n\r\nconst database = new Database();\r\n\r\nset(ref(database.database), 'users/' + 12, {a: 2});\r\n\r\nexport default database;"]},"metadata":{},"sourceType":"module"}