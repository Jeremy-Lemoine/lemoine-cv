{"ast":null,"code":"import { getDatabase, set, ref, onValue, goOffline, update } from \"firebase/database\";\nimport { initializeApp } from \"firebase/app\";\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_apiKey,\n  authDomain: process.env.REACT_APP_FIREBASE_authDomain,\n  projectId: process.env.REACT_APP_FIREBASE_projectId,\n  storageBucket: process.env.REACT_APP_FIREBASE_storageBucket,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_messagingSenderId,\n  appId: process.env.REACT_APP_FIREBASE_appId,\n  databaseURL: process.env.REACT_APP_FIREBASE_databaseURL\n};\nconst app = initializeApp(firebaseConfig);\n\nconst defaultUserData = function () {\n  let userName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let userPicture = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  return {\n    admin: false,\n    language: \"en\",\n    userName: userName,\n    userPicture: userPicture\n  };\n};\n\nclass Database {\n  constructor() {\n    this.database = getDatabase(app);\n  }\n\n  getRef(fullPath) {\n    return ref(this.database, fullPath);\n  }\n\n  async setItem(path, id, item) {\n    await set(this.getRef(`${path}/${id}`), item);\n  }\n\n  async readDirectory(path) {\n    return new Promise((resolve, reject) => {\n      const reference = this.getRef(`${path}/`);\n      onValue(reference, items => {\n        if (items.val()) {\n          return resolve(items.val());\n        } else {\n          return reject();\n        }\n      });\n    });\n  }\n\n  async readItem(path, id) {\n    return new Promise((resolve, reject) => {\n      const reference = this.getRef(`${path}/${id}`);\n      onValue(reference, item => {\n        if (item.val()) {\n          return resolve(item.val());\n        } else {\n          return reject();\n        }\n      });\n    });\n  }\n\n  async searchItems(path, query) {\n    const queriesList = Object.entries(query);\n    let retrieved = false;\n    return new Promise((resolve, reject) => {\n      const reference = this.getRef(`${path}/`);\n      onValue(reference, allItemsInPath => {\n        if (!retrieved) {\n          if (!allItemsInPath.val()) {\n            return reject();\n          }\n\n          const filteredItems = Object.entries(allItemsInPath.val()).filter(_ref => {\n            let [_, item] = _ref;\n            return queriesList.map(_ref2 => {\n              let [key, value] = _ref2;\n              return typeof item == \"object\" && key in item && item[key] === value;\n            }).reduce((acc, cur) => acc && cur, true);\n          });\n\n          if (filteredItems.length === 0) {\n            return reject();\n          }\n\n          return resolve(filteredItems);\n        }\n      });\n    });\n  }\n\n  async createUser(userID, userName, userPicture) {\n    await this.setItem(\"users\", userID, defaultUserData(userName, userPicture));\n    return defaultUserData(userName, userPicture);\n  }\n\n  async getUserData(userID, userName, userPicture) {\n    let retrieved = false;\n    return new Promise((resolve, _) => {\n      const reference = this.getRef(`users/${userID}`);\n      onValue(reference, async data_raw => {\n        if (!retrieved) {\n          retrieved = true;\n          let data = data_raw.val();\n\n          if (data) {\n            await this.checkUserDataFields(userID, userName, userPicture, data);\n            return resolve(data);\n          } else {\n            return resolve(this.createUser(userID, userName, userPicture));\n          }\n        }\n      });\n    });\n  }\n\n  async setUserData(userID, field, value) {\n    const updates = {};\n    updates[`/users/${userID}/${field}`] = value;\n    await update(ref(this.database), updates);\n  }\n\n  async checkUserDataFields(userID, userName, userPicture, data) {\n    const updates = {};\n    const defaultUser = defaultUserData(userName, userPicture);\n\n    for (let field of Object.keys(defaultUser)) {\n      if (data[field] == null) {\n        updates[`/users/${userID}/${field}`] = defaultUser[field];\n        data[field] = defaultUser[field];\n      }\n    }\n\n    for (let field of Object.keys(data)) {\n      if (defaultUser[field] == null) {\n        updates[`/users/${userID}/${field}`] = null;\n        data[field] = null;\n      }\n    }\n\n    if (data[\"userName\"] !== defaultUser[\"userName\"]) {\n      updates[`/users/${userID}/userName`] = defaultUser[\"userName\"];\n    }\n\n    if (data[\"userPicture\"] !== defaultUser[\"userPicture\"]) {\n      updates[`/users/${userID}/userPicture`] = defaultUser[\"userPicture\"];\n    }\n\n    if (updates !== {}) {\n      await update(ref(this.database), updates);\n    }\n  }\n\n  disconnect() {\n    goOffline(this.database);\n  }\n\n}\n\nconst database = new Database();\nexport default database;\nexport { defaultUserData };","map":{"version":3,"sources":["D:/Bureau/Projets Perso/React APP/coman-app/src/utils/database/database.js"],"names":["getDatabase","set","ref","onValue","goOffline","update","initializeApp","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_apiKey","authDomain","REACT_APP_FIREBASE_authDomain","projectId","REACT_APP_FIREBASE_projectId","storageBucket","REACT_APP_FIREBASE_storageBucket","messagingSenderId","REACT_APP_FIREBASE_messagingSenderId","appId","REACT_APP_FIREBASE_appId","databaseURL","REACT_APP_FIREBASE_databaseURL","app","defaultUserData","userName","userPicture","admin","language","Database","constructor","database","getRef","fullPath","setItem","path","id","item","readDirectory","Promise","resolve","reject","reference","items","val","readItem","searchItems","query","queriesList","Object","entries","retrieved","allItemsInPath","filteredItems","filter","_","map","key","value","reduce","acc","cur","length","createUser","userID","getUserData","data_raw","data","checkUserDataFields","setUserData","field","updates","defaultUser","keys","disconnect"],"mappings":"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","sourcesContent":["import { getDatabase, set, ref, onValue, goOffline, update } from \"firebase/database\";\r\nimport { initializeApp } from \"firebase/app\";\r\n\r\nconst firebaseConfig = {\r\n\tapiKey: process.env.REACT_APP_FIREBASE_apiKey,\r\n\tauthDomain: process.env.REACT_APP_FIREBASE_authDomain,\r\n\tprojectId: process.env.REACT_APP_FIREBASE_projectId,\r\n\tstorageBucket: process.env.REACT_APP_FIREBASE_storageBucket,\r\n\tmessagingSenderId: process.env.REACT_APP_FIREBASE_messagingSenderId,\r\n\tappId: process.env.REACT_APP_FIREBASE_appId,\r\n\tdatabaseURL: process.env.REACT_APP_FIREBASE_databaseURL,\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nconst defaultUserData = (userName = \"\", userPicture = \"\") => {\r\n\treturn {\r\n\t\tadmin: false,\r\n\t\tlanguage: \"en\",\r\n\t\tuserName: userName,\r\n\t\tuserPicture: userPicture,\r\n\t};\r\n};\r\n\r\nclass Database {\r\n\tconstructor() {\r\n\t\tthis.database = getDatabase(app);\r\n\t}\r\n\r\n\tgetRef(fullPath) {\r\n\t\treturn ref(this.database, fullPath);\r\n\t}\r\n\r\n\tasync setItem(path, id, item) {\r\n\t\tawait set(this.getRef(`${path}/${id}`), item);\r\n\t}\r\n\r\n\tasync readDirectory(path) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst reference = this.getRef(`${path}/`);\r\n\t\t\tonValue(reference, (items) => {\r\n\t\t\t\tif (items.val()) {\r\n\t\t\t\t\treturn resolve(items.val());\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn reject();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tasync readItem(path, id) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst reference = this.getRef(`${path}/${id}`);\r\n\t\t\tonValue(reference, (item) => {\r\n\t\t\t\tif (item.val()) {\r\n\t\t\t\t\treturn resolve(item.val());\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn reject();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tasync searchItems(path, query) {\r\n\t\tconst queriesList = Object.entries(query);\r\n\t\tlet retrieved = false;\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst reference = this.getRef(`${path}/`);\r\n\t\t\tonValue(reference, (allItemsInPath) => {\r\n\t\t\t\tif (!retrieved) {\r\n\t\t\t\t\tif (!allItemsInPath.val()) {\r\n\t\t\t\t\t\treturn reject();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst filteredItems = Object.entries(allItemsInPath.val()).filter(([_, item]) => {\r\n\t\t\t\t\t\treturn queriesList\r\n\t\t\t\t\t\t\t.map(([key, value]) => {\r\n\t\t\t\t\t\t\t\treturn typeof item == \"object\" && key in item && item[key] === value;\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.reduce((acc, cur) => acc && cur, true);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (filteredItems.length === 0) {\r\n\t\t\t\t\t\treturn reject();\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn resolve(filteredItems);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tasync createUser(userID, userName, userPicture) {\r\n\t\tawait this.setItem(\"users\", userID, defaultUserData(userName, userPicture));\r\n\t\treturn defaultUserData(userName, userPicture);\r\n\t}\r\n\r\n\tasync getUserData(userID, userName, userPicture) {\r\n\t\tlet retrieved = false;\r\n\t\treturn new Promise((resolve, _) => {\r\n\t\t\tconst reference = this.getRef(`users/${userID}`);\r\n\t\t\tonValue(reference, async (data_raw) => {\r\n\t\t\t\tif (!retrieved) {\r\n\t\t\t\t\tretrieved = true;\r\n\t\t\t\t\tlet data = data_raw.val();\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\tawait this.checkUserDataFields(userID, userName, userPicture, data);\r\n\t\t\t\t\t\treturn resolve(data);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn resolve(this.createUser(userID, userName, userPicture));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tasync setUserData(userID, field, value) {\r\n\t\tconst updates = {};\r\n\t\tupdates[`/users/${userID}/${field}`] = value;\r\n\t\tawait update(ref(this.database), updates);\r\n\t}\r\n\r\n\tasync checkUserDataFields(userID, userName, userPicture, data) {\r\n\t\tconst updates = {};\r\n\t\tconst defaultUser = defaultUserData(userName, userPicture);\r\n\t\tfor (let field of Object.keys(defaultUser)) {\r\n\t\t\tif (data[field] == null) {\r\n\t\t\t\tupdates[`/users/${userID}/${field}`] = defaultUser[field];\r\n\t\t\t\tdata[field] = defaultUser[field];\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let field of Object.keys(data)) {\r\n\t\t\tif (defaultUser[field] == null) {\r\n\t\t\t\tupdates[`/users/${userID}/${field}`] = null;\r\n\t\t\t\tdata[field] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (data[\"userName\"] !== defaultUser[\"userName\"]) {\r\n\t\t\tupdates[`/users/${userID}/userName`] = defaultUser[\"userName\"];\r\n\t\t}\r\n\t\tif (data[\"userPicture\"] !== defaultUser[\"userPicture\"]) {\r\n\t\t\tupdates[`/users/${userID}/userPicture`] = defaultUser[\"userPicture\"];\r\n\t\t}\r\n\t\tif (updates !== {}) {\r\n\t\t\tawait update(ref(this.database), updates);\r\n\t\t}\r\n\t}\r\n\r\n\tdisconnect() {\r\n\t\tgoOffline(this.database);\r\n\t}\r\n}\r\n\r\nconst database = new Database();\r\n\r\nexport default database;\r\nexport { defaultUserData };\r\n"]},"metadata":{},"sourceType":"module"}